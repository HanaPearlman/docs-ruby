===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The :manual:`aggregation framework</aggregation/>`
processes documents and returns computed results.
To define an aggregation using the driver, provide a list of options and
operators to the ``aggregate`` method.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'demographics')
  coll = client['populations']
  aggregation = coll.aggregate([
    { :$group => { :_id => "$city", :total_pop => { :$sum => "$pop" } } }
  ])

  aggregation.each do |doc|
    #=> Yields a BSON::Document.
  end

The MongoDB option ``allowDiskUse`` can be explicitly set on the
aggregation in one of two ways. 

- You can call the ``allow_disk_use`` method the ``aggregation``
  object to get a new object with the option set:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'demographics')
  coll = client[ 'populations' ]
  aggregation = coll.aggregate([ { :$group => { :_id => "$city",
                                                :total_pop => { :$sum => "$pop" }
                                              }
                                  }
                                ])
  aggregation_with_disk_use = aggregation.allow_disk_use(true)

  aggregation_with_disk_use.each do |document|
    #=> Yields a BSON::Document.
  end

- Or you can pass an option to the ``aggregate`` method:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'demographics')
  coll = client[ 'populations' ]
  aggregation = coll.aggregate([ { :$group => { :_id => "$city",
                                                :total_pop => { :$sum => "$pop" }
                                              }
                                  }
                                ],
                                :allow_disk_use => true)

  aggregation.each do |document|
    #=> Yields a BSON::Document.
  end
